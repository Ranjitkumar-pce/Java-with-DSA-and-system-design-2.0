Q1. Given an integer, find out the sum of its digits using recursion.
Ans.
import java.io.*;

class sum_of_digits
{
    static int sum_of_digit(int n)
    { 
        if (n == 0)
            return 0;
        return (n % 10 + sum_of_digit(n / 10));
    }
    public static void main(String args[])
    {
        int num = 12345;
        int result = sum_of_digit(num);
        System.out.println("Sum of digits in " + 
                           num + " is " + result);
    }
}
Q2: Given a number n. Find the sum of natural numbers till n but with alternate signs.
Ans.
// Java program to implement
// the above approach
import java.util.*;

class GFG{

// Function to find the sum of first
// N natural numbers with alternate signs
static int alternatingSumOfFirst_N(int N)
{
	
	// Stores sum of alternate sign 
	// of first N natural numbers
	int alternateSum = 0;
	
	for(int i = 1; i <= N; i++)
	{
		
		// If is an even number
		if (i % 2 == 0)
		{
			
			// Update alternateSum
			alternateSum += -i;
		}

		// If i is an odd number
		else
		{
			
			// Update alternateSum
			alternateSum += i;
		}
	}
	return alternateSum;
}

// Driver Code
public static void main(String[] args)
{
	int N = 6;
	
	System.out.print(alternatingSumOfFirst_N(N));
}
}

Q3: Print the max value of the array [ 13, 1, -3, 22, 5].
Ans.
public class LargestElement_array {  
    public static void main(String[] args) {  
  
        //Initialize array  
        int [] arr = new int [] {25, 11, 7, 75, 56};  
        //Initialize max with first element of array.  
        int max = arr[0];  
        //Loop through the array  
        for (int i = 0; i < arr.length; i++) {  
            //Compare elements of array with max  
           if(arr[i] > max)  
               max = arr[i];  
        }  
        System.out.println("Largest element present in given array: " + max);  
    }  
}  
Q4: Find the sum of the values of the array [92, 23, 15, -20, 10].
Ans.
// Java Program to find sum of elements in a given array
class Test {
	static int arr[] = { 12, 3, 4, 15 };

	// method for sum of elements in an array
	static int sum()
	{
		int sum = 0; // initialize sum
		int i;

		// Iterate through all elements and add them to sum
		for (i = 0; i < arr.length; i++)
			sum += arr[i];

		return sum;
	}

	// Driver method
	public static void main(String[] args)
	{
		System.out.println("Sum of given array is "
						+ sum());
	}
}
Q5:Given a number n. Print if it is an armstrong number or not.
Ans.
// Java program to determine whether 
// the number is Armstrong number or not
public class Armstrong {
    
    // Function to calculate x raised 
    // to the power y 
    int power(int x, long y)
    {
        if (y == 0)
            return 1;
        if (y % 2 == 0)
            return power(x, y / 2) * power(x, y / 2);
        return x * power(x, y / 2) * power(x, y / 2);
    }

    // Function to calculate order of the number 
    int order(int x)
    {
        int n = 0;
        while (x != 0) {
            n++;
            x = x / 10;
        }
        return n;
    }

    // Function to check whether the given 
    // number is Armstrong number or not
    boolean isArmstrong(int x)
    {
        // Calling order function
        int n = order(x);
        int temp = x, sum = 0;
        while (temp != 0) {
            int r = temp % 10;
            sum = sum + power(r, n);
            temp = temp / 10;
        }

        // If satisfies Armstrong condition
        return (sum == x);
    }

    // Driver Code
    public static void main(String[] args)
    {
        Armstrong ob = new Armstrong();
        int x = 153;
        System.out.println(ob.isArmstrong(x));
        x = 1253;
        System.out.println(ob.isArmstrong(x));
    }
}
